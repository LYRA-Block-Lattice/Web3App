import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { LyraApi } from "../../app/blockchain/lyra-api";
import { BlockchainAPI } from "../../app/blockchain/blockchain-api";
import { ContractTypes } from "../../app/blockchain/blocks/meta";

export interface TokenMintArgs {
  name: string;
  domain: string;
  description: string;
  supply: number;
}

export interface MinterState {
  value: number;
  status: "idle" | "minting" | "success" | "failed";
}

const initialState: MinterState = {
  value: 0,
  status: "idle"
};

function getWallet() {
  const userToken = JSON.parse(sessionStorage.getItem("token")!);
  const wallet = new LyraApi(BlockchainAPI.networkid, userToken.pvt);
  return wallet;
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const mintAsync = createAsyncThunk(
  "counter/fetchCount",
  async (args: TokenMintArgs) => {
    const wallet = getWallet();
    const response = await wallet.mintToken(
      args.name,
      args.domain,
      args.description,
      8,
      args.supply,
      true,
      undefined,
      undefined,
      undefined,
      ContractTypes.Cryptocurrency,
      undefined
    );
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const minterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(mintAsync.pending, (state) => {
        state.status = "minting";
      })
      .addCase(mintAsync.fulfilled, (state, action) => {
        state.status = "idle";
        //state.value += action.payload;
      })
      .addCase(mintAsync.rejected, (state) => {
        state.status = "failed";
      });
  }
});

export const { increment, decrement, incrementByAmount } = minterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default minterSlice.reducer;
